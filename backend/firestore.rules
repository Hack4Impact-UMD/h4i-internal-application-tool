rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	function isAuthed() {
    	return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function getCurrentUser() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function hasID(id) {
    	return request.auth.uid == id;
    }
    
    function isApplicant() {
    	return isAuthed() && getCurrentUser().data.role == "applicant";
    }
    
    function isReviewer() {
    	return isAuthed() && (getCurrentUser().data.role == "reviewer" || isSuperReviewer());
    }

    function isReviewerOnly() {
      return isAuthed() && isReviewer() && !isSuperReviewer();
    }
    
    function isSuperReviewer() {
    	return isAuthed() && getCurrentUser().data.role == "super-reviewer";
    }

    function isResponseOpen(response) {
      let formDocPath = /databases/$(database)/documents/application-forms/$(response.applicationFormId);
      return exists(formDocPath) && request.time < get(formDocPath).data.dueDate;
    }
    
    match /users/{user_id} {
      // user documents can be read only by the user they represent or reviewers
    	allow read: if isReviewer() || hasID(user_id);
      // user documents can be written to only by the user they represent or super-reviewers
      allow create: if isSuperReviewer();
      allow update: if isSuperReviewer();
      allow delete: if hasID(user_id) || isSuperReviewer();
    }

    match /application-forms/{form_id} {
      allow read: if isAuthed();
      allow create: if isSuperReviewer();
      allow update: if isSuperReviewer();
      allow delete: if isSuperReviewer();
    }

    match /application-responses/{response_id} {
      allow read: if isReviewer() || hasID(resource.data.userId); // currently all reviewers can read all apps
      allow create: if isApplicant() && request.resource.data.status == 'in-progress' && isResponseOpen(request.resource.data);
      allow update: if isApplicant() && hasID(resource.data.userId) && resource.data.status == 'in-progress' && isResponseOpen(resource.data);
      allow delete: if (isApplicant() && hasID(resource.data.userId)) || isSuperReviewer();
    }

    match /review-assignments/{assignment_id} {
      allow read: if isSuperReviewer() || (isReviewer() && hasID(resource.data.reviewerId));
      allow write: if isSuperReviewer();
    }

    match /interview-assignments/{assignment_id} {
      allow read: if isSuperReviewer() || (isReviewer() && hasID(resource.data.interviewerId));
      allow write: if isSuperReviewer();
    }

    match /review-data/{review_id} {
      allow read: if (isReviewer() && hasID(resource.data.reviewerId)) || isSuperReviewer();
      allow write: if isReviewer();
    }

    match /interview-data/{review_id} {
      allow read: if (isReviewer() && hasID(resource.data.interviewerId)) || isSuperReviewer();
      allow write: if isReviewer();
    }

    match /app-status/{status_id} {
      allow read: if isSuperReviewer();
      allow write: if isSuperReviewer();
    }
    
    // by default, all documents should be inaccessible to reads and writes
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
